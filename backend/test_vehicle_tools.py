#!/usr/bin/env python3
"""
Step 3 Verification: Test Vehicle Identification Tools
"""

import json
import sys
from pathlib import Path

# Add the current directory to the path so we can import agents
sys.path.insert(0, str(Path(__file__).parent))

from agents.tools.vehicle_tools import (
    identify_vehicle_from_report,
    validate_vehicle_in_catalog,
    find_matching_variants
)

def test_vehicle_tools():
    """Test the vehicle identification tools."""
    
    print("üß™ Testing Vehicle Tools...")
    print("=" * 50)
    
    # Test 1: Vehicle Identification
    print("1. Testing vehicle identification...")
    
    # Test data for Vauxhall Astra 2018
    damage_report_data = {
        "vehicle": {
            "make": "Vauxhall",
            "model": "Astra", 
            "year": 2018
        }
    }
    
    vehicle_info_data = {
        "make": "Vauxhall",
        "model": "Astra",
        "year": 2018,
        "vin": "ABC123456789"
    }
    
    damage_report_json = json.dumps(damage_report_data)
    vehicle_info_json = json.dumps(vehicle_info_data)
    
    try:
        result = identify_vehicle_from_report.func(damage_report_json, vehicle_info_json)
        
        if result.get("success"):
            manufacturer_id = result.get("manufacturer_id")
            make = result.get("make")
            model = result.get("model")
            year = result.get("year")
            confidence = result.get("confidence")
            
            print(f"‚úÖ Vehicle identification: {make} {model} -> manufacturer_id: {manufacturer_id}")
            print(f"   Year: {year}, Confidence: {confidence:.2f}")
        else:
            print(f"‚ùå Vehicle identification failed: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Vehicle identification error: {e}")
        return False
    
    # Test 2: Catalog Validation
    print("\n2. Testing catalog validation...")
    
    try:
        validation_result = validate_vehicle_in_catalog.func(manufacturer_id, model)
        
        if validation_result.get("valid"):
            exact_matches = validation_result.get("exact_matches", [])
            fuzzy_matches = validation_result.get("fuzzy_matches", [])
            total_models = validation_result.get("total_models", 0)
            
            print(f"‚úÖ Catalog validation: Found vehicle in catalog")
            print(f"   Exact matches: {len(exact_matches)}")
            print(f"   Fuzzy matches: {len(fuzzy_matches)}")
            print(f"   Total models for manufacturer: {total_models}")
        else:
            print(f"‚ùå Catalog validation failed: {validation_result.get('error')}")
            # Still continue with testing, as this might be expected for some manufacturers
            
    except Exception as e:
        print(f"‚ùå Catalog validation error: {e}")
        return False
    
    # Test 3: Variant Matching
    print("\n3. Testing variant matching...")
    
    try:
        variant_result = find_matching_variants.func(manufacturer_id, model, year)
        
        if variant_result.get("success"):
            variants = variant_result.get("variants", [])
            total_found = variant_result.get("total_found", 0)
            
            print(f"‚úÖ Variant matching: Found {len(variants)} compatible variants (total: {total_found})")
            
            # Show top 3 variants
            for i, variant in enumerate(variants[:3]):
                variant_name = variant.get("variant_name", "Unknown")
                compatibility_score = variant.get("compatibility_score", 0)
                variant_year = variant.get("year", "Unknown")
                
                print(f"   Variant {i+1}: {variant_name} ({variant_year}) - Score: {compatibility_score:.2f}")
        else:
            print(f"‚ö†Ô∏è  Variant matching: {variant_result.get('error')}")
            # This might be expected if manufacturer doesn't have detailed variant data
            
    except Exception as e:
        print(f"‚ùå Variant matching error: {e}")
        return False
    
    # Test 4: Error Handling
    print("\n4. Testing error handling...")
    
    # Test with unknown manufacturer
    unknown_vehicle_data = {
        "make": "UnknownBrand",
        "model": "TestModel",
        "year": 2020
    }
    
    try:
        error_result = identify_vehicle_from_report.func(
            json.dumps({}), 
            json.dumps(unknown_vehicle_data)
        )
        
        if not error_result.get("success"):
            print("‚úÖ Error handling: Gracefully handled unknown manufacturer")
            print(f"   Error message: {error_result.get('error')}")
        else:
            print("‚ö†Ô∏è  Error handling: Should have failed for unknown manufacturer")
            
    except Exception as e:
        print(f"‚ùå Error handling test failed: {e}")
        return False
    
    # Test 5: Field Variations
    print("\n5. Testing field variations...")
    
    # Test with different field names
    alternative_fields_data = {
        "vehicle_make": "BMW",
        "vehicle_model": "3 Series",
        "model_year": 2019
    }
    
    try:
        alt_result = identify_vehicle_from_report.func(
            json.dumps({}),
            json.dumps(alternative_fields_data)
        )
        
        if alt_result.get("success"):
            print("‚úÖ Field variations: Successfully parsed alternative field names")
            print(f"   Identified: {alt_result.get('make')} {alt_result.get('model')}")
        else:
            print(f"‚ö†Ô∏è  Field variations: {alt_result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå Field variations test failed: {e}")
        return False
    
    # Test 6: JSON Error Handling
    print("\n6. Testing JSON error handling...")
    
    try:
        json_error_result = identify_vehicle_from_report.func(
            "invalid json",
            "{\"make\": \"Toyota\"}"
        )
        
        if not json_error_result.get("success") and "JSON" in json_error_result.get("error", ""):
            print("‚úÖ JSON error handling: Gracefully handled invalid JSON")
        else:
            print("‚ö†Ô∏è  JSON error handling: Should have detected invalid JSON")
            
    except Exception as e:
        print(f"‚ùå JSON error handling test failed: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ Vehicle tools test complete - Ready for Step 4!")
    print("‚úÖ Vehicle identification tool extracts make/model/year from JSON")
    print("‚úÖ Manufacturer names map to catalog IDs correctly")
    print("‚úÖ Vehicle validation confirms catalog presence") 
    print("‚úÖ Variant matching finds compatible vehicle variants")
    print("‚úÖ Tools return structured results with error handling")
    print("‚úÖ Package exports all tools for agent use")
    
    return True

if __name__ == "__main__":
    success = test_vehicle_tools()
    exit(0 if success else 1)
